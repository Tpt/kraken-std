{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the kraken-std documentation! The Kraken standard library. Development Integration testing Integration tests are located in src/tests/integration . The following tools need to be available to run the integration tests: Cargo (to test Cargo building and publishing) The Cargo integration tests run against Artifactory and Cloudsmith and requires credentials to temporarily create a new Cargo repository (available in CI). Docker (used to setup services that we run integration tests against) Helm (to test Helm packaging and publishing) Poetry (to test Python publishing and installing) Slap (to test Python publishing and installing) Test a single integration test ``` PYTEST_FLAGS=\"--log-cli-level DEBUG -s -k <test_filter>\" kraken run pytestIntegration -v ```","title":"Welcome to the `kraken-std` documentation!"},{"location":"#welcome-to-the-kraken-std-documentation","text":"The Kraken standard library.","title":"Welcome to the kraken-std documentation!"},{"location":"#development","text":"","title":"Development"},{"location":"#integration-testing","text":"Integration tests are located in src/tests/integration . The following tools need to be available to run the integration tests: Cargo (to test Cargo building and publishing) The Cargo integration tests run against Artifactory and Cloudsmith and requires credentials to temporarily create a new Cargo repository (available in CI). Docker (used to setup services that we run integration tests against) Helm (to test Helm packaging and publishing) Poetry (to test Python publishing and installing) Slap (to test Python publishing and installing) Test a single integration test ``` PYTEST_FLAGS=\"--log-cli-level DEBUG -s -k <test_filter>\" kraken run pytestIntegration -v ```","title":"Integration testing"},{"location":"cargo/","text":"Cargo Build Rust projects with Cargo . Features Inject HTTP(S) Basic-auth credentials into Git clone and Cargo download requests in cargo build for compatibility with private registries (workaround until rust-lang/cargo#10592 is working and merged). Quickstart # .kraken.py from kraken.api import project from kraken.std.cargo import CargoBuildTask , CargoPublishTask , cargo_settings settings = cargo_settings () settings . add_auth ( \"example.jfrog.io\" , \"me@example.org\" , \"<API_TOKEN>\" ) settings . add_registry ( \"private-repo\" , \"https://example.jfrog.io/artifactory/git/default-cargo-local.git\" , publish_token = \"Bearer $ {PASSWORD} \" , ) project . do ( \"cargoBuild\" , CargoBuldTask ) project . do ( \"cargoPublish\" , CargoPublishTask , registry = \"private-repo\" ) Note The registry URL configured in the Kraken build script is currently written only temporarily into the .cargo/config.toml configuration file. In a future version, we may permanently write it into the file to keep it synchronized or instead pick up the configured registries by reading the configuration file instead. Integration tests The cargo_publish() and cargo_build() tasks are continuously integration tested against JFrog Artifactory and Cloudsmith. API Documentation Class CargoProjectSettings @dataclasses . dataclass class CargoProjectSettings () [view_source] Settings for Cargo tasks in a project. auth A dictionary that maps host names to (username, password) tuples. registries A dictionary that maps registry index URLs. cargo_settings def cargo_settings ( project : Project | None = None ) -> CargoProjectSettings [view_source] Creates or gets the cargo project settings for the current project or the given one. Class CargoBuildTask class CargoBuildTask ( Task ) [view_source] This task runs cargo build using the specified parameters. It will respect the authentication credentials configured in :attr: CargoProjectSettings.auth . Class CargoPublishTask class CargoPublishTask ( Task ) [view_source] Publish a Cargo crate. registry The name of the Cargo registry configured in .cargo/config.yoml under [registries] to publish the package to. allow_dirty Pass the --allow-dirty flag to cargo publish . This is usually discouraged.","title":"Cargo"},{"location":"cargo/#cargo","text":"Build Rust projects with Cargo . Features Inject HTTP(S) Basic-auth credentials into Git clone and Cargo download requests in cargo build for compatibility with private registries (workaround until rust-lang/cargo#10592 is working and merged). Quickstart # .kraken.py from kraken.api import project from kraken.std.cargo import CargoBuildTask , CargoPublishTask , cargo_settings settings = cargo_settings () settings . add_auth ( \"example.jfrog.io\" , \"me@example.org\" , \"<API_TOKEN>\" ) settings . add_registry ( \"private-repo\" , \"https://example.jfrog.io/artifactory/git/default-cargo-local.git\" , publish_token = \"Bearer $ {PASSWORD} \" , ) project . do ( \"cargoBuild\" , CargoBuldTask ) project . do ( \"cargoPublish\" , CargoPublishTask , registry = \"private-repo\" ) Note The registry URL configured in the Kraken build script is currently written only temporarily into the .cargo/config.toml configuration file. In a future version, we may permanently write it into the file to keep it synchronized or instead pick up the configured registries by reading the configuration file instead. Integration tests The cargo_publish() and cargo_build() tasks are continuously integration tested against JFrog Artifactory and Cloudsmith.","title":"Cargo"},{"location":"cargo/#api-documentation","text":"","title":"API Documentation"},{"location":"cargo/#class-cargoprojectsettings","text":"@dataclasses . dataclass class CargoProjectSettings () [view_source] Settings for Cargo tasks in a project.","title":"Class CargoProjectSettings"},{"location":"cargo/#auth","text":"A dictionary that maps host names to (username, password) tuples.","title":"auth"},{"location":"cargo/#registries","text":"A dictionary that maps registry index URLs.","title":"registries"},{"location":"cargo/#cargo_settings","text":"def cargo_settings ( project : Project | None = None ) -> CargoProjectSettings [view_source] Creates or gets the cargo project settings for the current project or the given one.","title":"cargo_settings"},{"location":"cargo/#class-cargobuildtask","text":"class CargoBuildTask ( Task ) [view_source] This task runs cargo build using the specified parameters. It will respect the authentication credentials configured in :attr: CargoProjectSettings.auth .","title":"Class CargoBuildTask"},{"location":"cargo/#class-cargopublishtask","text":"class CargoPublishTask ( Task ) [view_source] Publish a Cargo crate.","title":"Class CargoPublishTask"},{"location":"cargo/#registry","text":"The name of the Cargo registry configured in .cargo/config.yoml under [registries] to publish the package to.","title":"registry"},{"location":"cargo/#allow_dirty","text":"Pass the --allow-dirty flag to cargo publish . This is usually discouraged.","title":"allow_dirty"},{"location":"changelog/","text":"Changelog 0.1.20 (2022-07-21) Type Description PR Issues Author Feature add `PythonSettings.always_use_managed_env` to ensure that Python tasks use the managed environment from the Python build system (instead of falling back to a currently active virtual environment) @NiklasRosenstein Fix add `--non-interactive` to Twine upload @NiklasRosenstein Feature add `--log-cli-level` by default when running Pytest and take `PYTEST_FLAGS` into account @NiklasRosenstein Tests add integration tests for linting and publishing Poetry and Slap Python projects @NiklasRosenstein Fix update `PoetryPythonBuildSystem` to ignore the current virtual environment to ensure we get the path of the Poetry managed environment @NiklasRosenstein Fix `PoetryPythonBuildSystem` now injects package indexes and credentials into `pyproject.toml` and `poetry.toml` temporarily @NiklasRosenstein Fix Pass index URL and credentials to `slap install` command @NiklasRosenstein 0.1.19 (2022-07-20) Type Description PR Issues Author Fix fix `:blackFormat` actually formatting instead of checking and `:blackCheck` actually to just check instead of formatting @NiklasRosenstein 0.1.18 (2022-07-20) Type Description PR Issues Author Feature add Python `PublishTask.skip_existing` @NiklasRosenstein 0.1.17 (2022-07-20) Type Description PR Issues Author Feature add `BlackTask.additional_files` and `IsortTask.additional_files` @NiklasRosenstein Fix fix Python build system now properly moving the distributions instead of just renaming, which fails across file system boundaries @NiklasRosenstein 0.1.16 (2022-07-20) Type Description PR Issues Author Fix fix publishing @NiklasRosenstein 0.1.15 (2022-07-20) Type Description PR Issues Author Improvement Refactor Python task, add tasks for build and publish and the ability to register package indices that will be used for publishing (and should also be used for installing but we dont do that yet) @NiklasRosenstein Feature add `kraken.std.git` module and `kraken.std.python.utils.git_version_to_python()` function @NiklasRosenstein 0.1.14 (2022-07-19) Type Description PR Issues Author Fix fix interpretation of `KanikoBuildTask.load` property (before it would always load) @NiklasRosenstein 0.1.13 (2022-07-19) Type Description PR Issues Author Improvement `KanikoBuildTask` now errors in `finalize()` if the `cache_repo` contains a `:` (colon) @NiklasRosenstein Improvement Add `SlapEnvironmentHandler` and automatic detection of an appropriate environment handler; add `InstallTask` and `install()` function to `kraken.std.python`; if the instal task exists then all toolchain tasks in Python will depend on it @NiklasRosenstein 0.1.12 (2022-07-19) Type Description PR Issues Author Improvement RenderFileTask no longer tries to call the content supplier in `finalize()`, fix info line on the file being written @NiklasRosenstein Improvement add INFO log for subcommand executed by python `EnvironmentAwareDispatchTask` @NiklasRosenstein Fix Python `MypyTask` no longer adds the test directory if it is a subdirectory of the source directory, which used to cause an error in Mypy @NiklasRosenstein Improvement add `MypyTask.python_version` property @NiklasRosenstein 0.1.11 (2022-07-19) Type Description PR Issues Author Feature add `kraken.std.python` package which provides tasks and factories for black, flake8, isort, mypy and pytest @NiklasRosenstein 0.1.10 (2022-07-19) Type Description PR Issues Author Breaking change upgrade to be compatible with `kraken-core ^0.3.0`, add Novella docs and publish to Github actions @NiklasRosenstein 0.1.9 (2022-07-14) Type Description PR Issues Author Improvement add `native_use_buildkit` option to the `NativeBuildTask` for Docker @NiklasRosenstein 0.1.8 (2022-07-14) Type Description PR Issues Author Feature add \"native\" docker build backend @NiklasRosenstein Feature add `manifest_tool_push` task @NiklasRosenstein 0.1.7 (2022-07-13) Type Description PR Issues Author Fix actually handke `KanikoBuildTask.kaniko_copy_cache_layers` option @NiklasRosenstein 0.1.6 (2022-07-09) Type Description PR Issues Author Feature Build Cargo integration test for Artifactory and Cloudsmith @NiklasRosenstein 0.1.5 (2022-07-08) Type Description PR Issues Author Feature Add `DockerBuildTask.platform` property @NiklasRosenstein Improvement use new `Task.logger` in kraken-core 0.2.4 in `KanikoBuildTask` @NiklasRosenstein Feature add `kraken.std.cargo` package with a `cargo_build()` task that can setup an MITM to inject credentials for requests to a host configured with `cargo_settings()` @NiklasRosenstein 0.1.4 (2022-07-06) Type Description PR Issues Author Breaking change update Helm task parameters and add docstrings @NiklasRosenstein 0.1.1 (2022-07-04) Type Description PR Issues Author Improvement update `docker_build()` to accept `dockerfile` parameter as a string and use `Project.to_path()` @NiklasRosenstein","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#0120-2022-07-21","text":"Type Description PR Issues Author Feature add `PythonSettings.always_use_managed_env` to ensure that Python tasks use the managed environment from the Python build system (instead of falling back to a currently active virtual environment) @NiklasRosenstein Fix add `--non-interactive` to Twine upload @NiklasRosenstein Feature add `--log-cli-level` by default when running Pytest and take `PYTEST_FLAGS` into account @NiklasRosenstein Tests add integration tests for linting and publishing Poetry and Slap Python projects @NiklasRosenstein Fix update `PoetryPythonBuildSystem` to ignore the current virtual environment to ensure we get the path of the Poetry managed environment @NiklasRosenstein Fix `PoetryPythonBuildSystem` now injects package indexes and credentials into `pyproject.toml` and `poetry.toml` temporarily @NiklasRosenstein Fix Pass index URL and credentials to `slap install` command @NiklasRosenstein","title":"0.1.20 (2022-07-21)"},{"location":"changelog/#0119-2022-07-20","text":"Type Description PR Issues Author Fix fix `:blackFormat` actually formatting instead of checking and `:blackCheck` actually to just check instead of formatting @NiklasRosenstein","title":"0.1.19 (2022-07-20)"},{"location":"changelog/#0118-2022-07-20","text":"Type Description PR Issues Author Feature add Python `PublishTask.skip_existing` @NiklasRosenstein","title":"0.1.18 (2022-07-20)"},{"location":"changelog/#0117-2022-07-20","text":"Type Description PR Issues Author Feature add `BlackTask.additional_files` and `IsortTask.additional_files` @NiklasRosenstein Fix fix Python build system now properly moving the distributions instead of just renaming, which fails across file system boundaries @NiklasRosenstein","title":"0.1.17 (2022-07-20)"},{"location":"changelog/#0116-2022-07-20","text":"Type Description PR Issues Author Fix fix publishing @NiklasRosenstein","title":"0.1.16 (2022-07-20)"},{"location":"changelog/#0115-2022-07-20","text":"Type Description PR Issues Author Improvement Refactor Python task, add tasks for build and publish and the ability to register package indices that will be used for publishing (and should also be used for installing but we dont do that yet) @NiklasRosenstein Feature add `kraken.std.git` module and `kraken.std.python.utils.git_version_to_python()` function @NiklasRosenstein","title":"0.1.15 (2022-07-20)"},{"location":"changelog/#0114-2022-07-19","text":"Type Description PR Issues Author Fix fix interpretation of `KanikoBuildTask.load` property (before it would always load) @NiklasRosenstein","title":"0.1.14 (2022-07-19)"},{"location":"changelog/#0113-2022-07-19","text":"Type Description PR Issues Author Improvement `KanikoBuildTask` now errors in `finalize()` if the `cache_repo` contains a `:` (colon) @NiklasRosenstein Improvement Add `SlapEnvironmentHandler` and automatic detection of an appropriate environment handler; add `InstallTask` and `install()` function to `kraken.std.python`; if the instal task exists then all toolchain tasks in Python will depend on it @NiklasRosenstein","title":"0.1.13 (2022-07-19)"},{"location":"changelog/#0112-2022-07-19","text":"Type Description PR Issues Author Improvement RenderFileTask no longer tries to call the content supplier in `finalize()`, fix info line on the file being written @NiklasRosenstein Improvement add INFO log for subcommand executed by python `EnvironmentAwareDispatchTask` @NiklasRosenstein Fix Python `MypyTask` no longer adds the test directory if it is a subdirectory of the source directory, which used to cause an error in Mypy @NiklasRosenstein Improvement add `MypyTask.python_version` property @NiklasRosenstein","title":"0.1.12 (2022-07-19)"},{"location":"changelog/#0111-2022-07-19","text":"Type Description PR Issues Author Feature add `kraken.std.python` package which provides tasks and factories for black, flake8, isort, mypy and pytest @NiklasRosenstein","title":"0.1.11 (2022-07-19)"},{"location":"changelog/#0110-2022-07-19","text":"Type Description PR Issues Author Breaking change upgrade to be compatible with `kraken-core ^0.3.0`, add Novella docs and publish to Github actions @NiklasRosenstein","title":"0.1.10 (2022-07-19)"},{"location":"changelog/#019-2022-07-14","text":"Type Description PR Issues Author Improvement add `native_use_buildkit` option to the `NativeBuildTask` for Docker @NiklasRosenstein","title":"0.1.9 (2022-07-14)"},{"location":"changelog/#018-2022-07-14","text":"Type Description PR Issues Author Feature add \"native\" docker build backend @NiklasRosenstein Feature add `manifest_tool_push` task @NiklasRosenstein","title":"0.1.8 (2022-07-14)"},{"location":"changelog/#017-2022-07-13","text":"Type Description PR Issues Author Fix actually handke `KanikoBuildTask.kaniko_copy_cache_layers` option @NiklasRosenstein","title":"0.1.7 (2022-07-13)"},{"location":"changelog/#016-2022-07-09","text":"Type Description PR Issues Author Feature Build Cargo integration test for Artifactory and Cloudsmith @NiklasRosenstein","title":"0.1.6 (2022-07-09)"},{"location":"changelog/#015-2022-07-08","text":"Type Description PR Issues Author Feature Add `DockerBuildTask.platform` property @NiklasRosenstein Improvement use new `Task.logger` in kraken-core 0.2.4 in `KanikoBuildTask` @NiklasRosenstein Feature add `kraken.std.cargo` package with a `cargo_build()` task that can setup an MITM to inject credentials for requests to a host configured with `cargo_settings()` @NiklasRosenstein","title":"0.1.5 (2022-07-08)"},{"location":"changelog/#014-2022-07-06","text":"Type Description PR Issues Author Breaking change update Helm task parameters and add docstrings @NiklasRosenstein","title":"0.1.4 (2022-07-06)"},{"location":"changelog/#011-2022-07-04","text":"Type Description PR Issues Author Improvement update `docker_build()` to accept `dockerfile` parameter as a string and use `Project.to_path()` @NiklasRosenstein","title":"0.1.1 (2022-07-04)"},{"location":"docker/","text":"Docker Build and publish Docker images. Supported backends Native Docker (currently does not perform auth for you) Buildx (currently does not perform auth for you) Kaniko Quickstart # .kraken.py from kraken.std.docker import build_docker_image build_docker_image ( name = \"buildDocker\" , dockerfile = \"docker/release.Dockerfile\" , tags = [ \"kraken-example\" ], load = True , ) Integration tests The build_docker_image() function for Buildx and Kaniko are continuously integration tested to ensure that build time secrets under /run/secrets don't appear in the final image. API Documentation build_docker_image def build_docker_image ( * , name : str = \"buildDocker\" , backend : str = DEFAULT_BUILD_BACKEND , project : Project | None = None , ** kwds : Any ) -> DockerBuildTask [view_source] Create a new task in the current project that builds a Docker image and eventually pushes it. Class DockerBuildTask class DockerBuildTask ( Task ) [view_source] Base class for tasks that build Docker images. Subclasses implement converting the task properties into the invokation for a Docker build backend. Native Class NativeBuildTask class NativeBuildTask ( DockerBuildTask ) [view_source] Implements building a Docker image using the native docker build command. native_use_buildkit Whether to use Docker Buildkit. Enabled by default. Buildx Class BuildxBuildTask class BuildxBuildTask ( DockerBuildTask ) [view_source] Implements building a Docker image with Buildx. Kaniko Class KanikoBuildTask class KanikoBuildTask ( DockerBuildTask ) [view_source] An implementation for building Docker images with Kaniko. Manifest Tool Class ManifestToolPushTask class ManifestToolPushTask ( Task ) [view_source] A task that uses manifest-tool to combine multiple container images from different platforms into a single multi-platform manifest. For more information on manifest-tool , check out the GitHub repository: https://github.com/estesp/manifest-tool/ platforms The Docker platforms to create the manifest for. template A Docker image tag that should contain the variables OS , ARCH and VARIANT . target The image ID to push the Docker image to. manifest_tool_local Prefer the local version of the tool if available. Default is true . manifest_tool_version The tool version to use. The appropriate release will be downloaded from Github. fetch_manifest_tool def fetch_manifest_tool () -> Path [view_source] Fetches the manifest tool binary that is appropriate for the current platform.","title":"Docker"},{"location":"docker/#docker","text":"Build and publish Docker images. Supported backends Native Docker (currently does not perform auth for you) Buildx (currently does not perform auth for you) Kaniko Quickstart # .kraken.py from kraken.std.docker import build_docker_image build_docker_image ( name = \"buildDocker\" , dockerfile = \"docker/release.Dockerfile\" , tags = [ \"kraken-example\" ], load = True , ) Integration tests The build_docker_image() function for Buildx and Kaniko are continuously integration tested to ensure that build time secrets under /run/secrets don't appear in the final image.","title":"Docker"},{"location":"docker/#api-documentation","text":"","title":"API Documentation"},{"location":"docker/#build_docker_image","text":"def build_docker_image ( * , name : str = \"buildDocker\" , backend : str = DEFAULT_BUILD_BACKEND , project : Project | None = None , ** kwds : Any ) -> DockerBuildTask [view_source] Create a new task in the current project that builds a Docker image and eventually pushes it.","title":"build_docker_image"},{"location":"docker/#class-dockerbuildtask","text":"class DockerBuildTask ( Task ) [view_source] Base class for tasks that build Docker images. Subclasses implement converting the task properties into the invokation for a Docker build backend.","title":"Class DockerBuildTask"},{"location":"docker/#native","text":"","title":"Native"},{"location":"docker/#class-nativebuildtask","text":"class NativeBuildTask ( DockerBuildTask ) [view_source] Implements building a Docker image using the native docker build command.","title":"Class NativeBuildTask"},{"location":"docker/#native_use_buildkit","text":"Whether to use Docker Buildkit. Enabled by default.","title":"native_use_buildkit"},{"location":"docker/#buildx","text":"","title":"Buildx"},{"location":"docker/#class-buildxbuildtask","text":"class BuildxBuildTask ( DockerBuildTask ) [view_source] Implements building a Docker image with Buildx.","title":"Class BuildxBuildTask"},{"location":"docker/#kaniko","text":"","title":"Kaniko"},{"location":"docker/#class-kanikobuildtask","text":"class KanikoBuildTask ( DockerBuildTask ) [view_source] An implementation for building Docker images with Kaniko.","title":"Class KanikoBuildTask"},{"location":"docker/#manifest-tool","text":"","title":"Manifest Tool"},{"location":"docker/#class-manifesttoolpushtask","text":"class ManifestToolPushTask ( Task ) [view_source] A task that uses manifest-tool to combine multiple container images from different platforms into a single multi-platform manifest. For more information on manifest-tool , check out the GitHub repository: https://github.com/estesp/manifest-tool/","title":"Class ManifestToolPushTask"},{"location":"docker/#platforms","text":"The Docker platforms to create the manifest for.","title":"platforms"},{"location":"docker/#template","text":"A Docker image tag that should contain the variables OS , ARCH and VARIANT .","title":"template"},{"location":"docker/#target","text":"The image ID to push the Docker image to.","title":"target"},{"location":"docker/#manifest_tool_local","text":"Prefer the local version of the tool if available. Default is true .","title":"manifest_tool_local"},{"location":"docker/#manifest_tool_version","text":"The tool version to use. The appropriate release will be downloaded from Github.","title":"manifest_tool_version"},{"location":"docker/#fetch_manifest_tool","text":"def fetch_manifest_tool () -> Path [view_source] Fetches the manifest tool binary that is appropriate for the current platform.","title":"fetch_manifest_tool"},{"location":"helm/","text":"Helm Package and publish Helm charts to OCI or HTTP(S) registries. Quickstart # .kraken.py from kraken.api import project from kraken.std.helm import HelmPushTask , HelmPackageTask , helm_settings helm_settings () . add_auth ( \"example.jfrog.io\" , \"me@example.org\" , \"api_token\" ) package = project . do ( \"helmPackage\" , HelmPackageTask , chart_path = \"./my-helm-chart\" ) project . do ( \"helmPush\" , HelmPushTask , chart_tarball = package . chart_tarball , registry = \"example.jfrog.io/helm-local\" ) API Documentation Class HelmSettings @dataclasses . dataclass class HelmSettings () [view_source] Project-specific settings for Helm. helm_settings def helm_settings ( project : Project | None = None ) -> HelmSettings [view_source] Create or get Helm settings for the project. Class HelmPackageTask class HelmPackageTask ( Task ) [view_source] Packages a Helm chart. Class HelmPushTask class HelmPushTask ( Task ) [view_source] Pushes a Helm chart to a Helm registry. Supports OCI and HTTP(S) registries. chart_tarball The path to the Helm chart package file. This is usually linked with the :attr: HelmPackageTask.chart_tarball output property. registry The Helm registry to push to. This can be an HTTP(S) URL to a Helm registry, in which case it must be the full URL to the remote \"directory\" where the :attr: chart_tarball will be uploaded to. The filename for the chart in the directory is the basename of :attr: chart_tarball unless :attr: chart_name is set. Alternatively, an oci:// URL can be specified in which case the helm push command is used to push the chart instead. Note that in this case the :attr: chart_name cannot be used and doing so will result in an error. chart_name The base name of the chart in the registry. Only when uploading to a HTTP(S) \"directory\". chart_url The final constructed chart URL that the chart will be published under. Note: This URL is not currently constructed when pushing to an oci:// registry and reading the property will cause an error.","title":"Helm"},{"location":"helm/#helm","text":"Package and publish Helm charts to OCI or HTTP(S) registries. Quickstart # .kraken.py from kraken.api import project from kraken.std.helm import HelmPushTask , HelmPackageTask , helm_settings helm_settings () . add_auth ( \"example.jfrog.io\" , \"me@example.org\" , \"api_token\" ) package = project . do ( \"helmPackage\" , HelmPackageTask , chart_path = \"./my-helm-chart\" ) project . do ( \"helmPush\" , HelmPushTask , chart_tarball = package . chart_tarball , registry = \"example.jfrog.io/helm-local\" )","title":"Helm"},{"location":"helm/#api-documentation","text":"","title":"API Documentation"},{"location":"helm/#class-helmsettings","text":"@dataclasses . dataclass class HelmSettings () [view_source] Project-specific settings for Helm.","title":"Class HelmSettings"},{"location":"helm/#helm_settings","text":"def helm_settings ( project : Project | None = None ) -> HelmSettings [view_source] Create or get Helm settings for the project.","title":"helm_settings"},{"location":"helm/#class-helmpackagetask","text":"class HelmPackageTask ( Task ) [view_source] Packages a Helm chart.","title":"Class HelmPackageTask"},{"location":"helm/#class-helmpushtask","text":"class HelmPushTask ( Task ) [view_source] Pushes a Helm chart to a Helm registry. Supports OCI and HTTP(S) registries.","title":"Class HelmPushTask"},{"location":"helm/#chart_tarball","text":"The path to the Helm chart package file. This is usually linked with the :attr: HelmPackageTask.chart_tarball output property.","title":"chart_tarball"},{"location":"helm/#registry","text":"The Helm registry to push to. This can be an HTTP(S) URL to a Helm registry, in which case it must be the full URL to the remote \"directory\" where the :attr: chart_tarball will be uploaded to. The filename for the chart in the directory is the basename of :attr: chart_tarball unless :attr: chart_name is set. Alternatively, an oci:// URL can be specified in which case the helm push command is used to push the chart instead. Note that in this case the :attr: chart_name cannot be used and doing so will result in an error.","title":"registry"},{"location":"helm/#chart_name","text":"The base name of the chart in the registry. Only when uploading to a HTTP(S) \"directory\".","title":"chart_name"},{"location":"helm/#chart_url","text":"The final constructed chart URL that the chart will be published under. Note: This URL is not currently constructed when pushing to an oci:// registry and reading the property will cause an error.","title":"chart_url"},{"location":"python/","text":"Python Lint, format and test Python code. Supported tools Black Flake8 isort Mypy Pytest Supported build systems (for installing/building) Poetry Slap Build systems A build system that is supported by Kraken is needed to use the {@link pydoc:kraken.std.python.tasks.build_task.BuildTask}. Most build systems will support managed Python environments for the current Python project (e.g. poetry install will create a virtual environment and install the project into it). Build systems implemented for Kraken will take care of the installation, ensuring that the Python package indexes registered in the build script are made available to the installation process. Poetry Package index credentials : The installation process injects package index configurations into poetry.toml and pyproject.toml [TODO] Should we permanently inject the config into pyproject.toml and keep it in sync with a task? Slap Package index credentials : [TODO] The installation processs passes the extra index URLs to slap install using the --package-index option. [TODO] Should we add an option to permanently add a package index to the Slap configuration and then keep it in sync with a task? Publishing Independent of the Python build system used, Kraken will use Twine to publish to a Package index. API Documentation python_settings def python_settings ( project : Project | None = None , build_system : PythonBuildSystem | None = None , source_directory : str | Path | None = None , tests_directory : str | Path | None = None , always_use_managed_env : bool | None = None ) -> PythonSettings [view_source] Read the Python settings for the given or current project and optionally update attributes. Arguments : project : The project to get the settings for. If not specified, the current project will be used. source_directory : The source directory. Defaults to \"src\" . tests_directory : The tests directory. Automatically determined if left empty. Class PythonSettings @dataclasses . dataclass class PythonSettings () [view_source] Project-global settings for Python tasks. get_tests_directory def get_tests_directory () -> Path | None [view_source] Returns :attr: tests_directory if it is set. If not, it will look for the following directories and return the first that exists: test/ , tests/ , src/test/ , src/tests/ . The determined path will be relative to the project directory. get_tests_directory_as_args def get_tests_directory_as_args () -> list [ str ] [view_source] Returns a list with a single item that is the test directory, or an empty list. This is convenient when constructing command-line arguments where you want to pass the test directory if it exists. add_package_index def add_package_index ( alias : str , * , index_url : str | None = None , upload_url : str | None = None , credentials : tuple [ str , str ] | None = None , is_package_source : bool = True ) -> PythonSettings [view_source] Adds an index to consume Python packages from or publish packages to. Arguments : alias : An alias for the package index. index_url : The URL of the package index (with the trailing /simple bit if applicable). If not specified, alias must be a known package index ( pypi or testpypi ). upload_url : If the upload url deviates from the registry URL. Otherwise, the upload URL will be the same as the url , credentials : Optional credentials to read from the index. is_package_source : If set to False , the index will not be used to source packages from, but can be used to publish to. Black @pydoc kraken.std.python.tasks.black.BlackTask @pydoc kraken.std.python.tasks.black.black Flake8 @pydoc kraken.std.python.tasks.flake8.Flake8Task @pydoc kraken.std.python.tasks.flake8.flake8 isort @pydoc kraken.std.python.tasks.isort.IsortTask @pydoc kraken.std.python.tasks.isort.isort Mypy @pydoc kraken.std.python.tasks.mypy.MypyTask @pydoc kraken.std.python.tasks.mypy.mypy Pytest @pydoc kraken.std.python.tasks.pytest.PytestTask @pydoc kraken.std.python.tasks.pytest.pytest","title":"Python"},{"location":"python/#python","text":"Lint, format and test Python code. Supported tools Black Flake8 isort Mypy Pytest Supported build systems (for installing/building) Poetry Slap","title":"Python"},{"location":"python/#build-systems","text":"A build system that is supported by Kraken is needed to use the {@link pydoc:kraken.std.python.tasks.build_task.BuildTask}. Most build systems will support managed Python environments for the current Python project (e.g. poetry install will create a virtual environment and install the project into it). Build systems implemented for Kraken will take care of the installation, ensuring that the Python package indexes registered in the build script are made available to the installation process.","title":"Build systems"},{"location":"python/#poetry","text":"Package index credentials : The installation process injects package index configurations into poetry.toml and pyproject.toml [TODO] Should we permanently inject the config into pyproject.toml and keep it in sync with a task?","title":"Poetry"},{"location":"python/#slap","text":"Package index credentials : [TODO] The installation processs passes the extra index URLs to slap install using the --package-index option. [TODO] Should we add an option to permanently add a package index to the Slap configuration and then keep it in sync with a task?","title":"Slap"},{"location":"python/#publishing","text":"Independent of the Python build system used, Kraken will use Twine to publish to a Package index.","title":"Publishing"},{"location":"python/#api-documentation","text":"","title":"API Documentation"},{"location":"python/#python_settings","text":"def python_settings ( project : Project | None = None , build_system : PythonBuildSystem | None = None , source_directory : str | Path | None = None , tests_directory : str | Path | None = None , always_use_managed_env : bool | None = None ) -> PythonSettings [view_source] Read the Python settings for the given or current project and optionally update attributes. Arguments : project : The project to get the settings for. If not specified, the current project will be used. source_directory : The source directory. Defaults to \"src\" . tests_directory : The tests directory. Automatically determined if left empty.","title":"python_settings"},{"location":"python/#class-pythonsettings","text":"@dataclasses . dataclass class PythonSettings () [view_source] Project-global settings for Python tasks.","title":"Class PythonSettings"},{"location":"python/#get_tests_directory","text":"def get_tests_directory () -> Path | None [view_source] Returns :attr: tests_directory if it is set. If not, it will look for the following directories and return the first that exists: test/ , tests/ , src/test/ , src/tests/ . The determined path will be relative to the project directory.","title":"get_tests_directory"},{"location":"python/#get_tests_directory_as_args","text":"def get_tests_directory_as_args () -> list [ str ] [view_source] Returns a list with a single item that is the test directory, or an empty list. This is convenient when constructing command-line arguments where you want to pass the test directory if it exists.","title":"get_tests_directory_as_args"},{"location":"python/#add_package_index","text":"def add_package_index ( alias : str , * , index_url : str | None = None , upload_url : str | None = None , credentials : tuple [ str , str ] | None = None , is_package_source : bool = True ) -> PythonSettings [view_source] Adds an index to consume Python packages from or publish packages to. Arguments : alias : An alias for the package index. index_url : The URL of the package index (with the trailing /simple bit if applicable). If not specified, alias must be a known package index ( pypi or testpypi ). upload_url : If the upload url deviates from the registry URL. Otherwise, the upload URL will be the same as the url , credentials : Optional credentials to read from the index. is_package_source : If set to False , the index will not be used to source packages from, but can be used to publish to.","title":"add_package_index"},{"location":"python/#black","text":"@pydoc kraken.std.python.tasks.black.BlackTask @pydoc kraken.std.python.tasks.black.black","title":"Black"},{"location":"python/#flake8","text":"@pydoc kraken.std.python.tasks.flake8.Flake8Task @pydoc kraken.std.python.tasks.flake8.flake8","title":"Flake8"},{"location":"python/#isort","text":"@pydoc kraken.std.python.tasks.isort.IsortTask @pydoc kraken.std.python.tasks.isort.isort","title":"isort"},{"location":"python/#mypy","text":"@pydoc kraken.std.python.tasks.mypy.MypyTask @pydoc kraken.std.python.tasks.mypy.mypy","title":"Mypy"},{"location":"python/#pytest","text":"@pydoc kraken.std.python.tasks.pytest.PytestTask @pydoc kraken.std.python.tasks.pytest.pytest","title":"Pytest"}]}