{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the kraken-std documentation! The Kraken standard library.","title":"Welcome to the `kraken-std` documentation!"},{"location":"#welcome-to-the-kraken-std-documentation","text":"The Kraken standard library.","title":"Welcome to the kraken-std documentation!"},{"location":"cargo/","text":"Cargo Build Rust projects with Cargo . Features Inject HTTP(S) Basic-auth credentials into Git clone and Cargo download requests in cargo build for compatibility with private registries (workaround until rust-lang/cargo#10592 is working and merged). Quickstart # .kraken.py from kraken.api import project from kraken.std.cargo import CargoBuildTask , CargoPublishTask , cargo_settings settings = cargo_settings () settings . add_auth ( \"example.jfrog.io\" , \"me@example.org\" , \"<API_TOKEN>\" ) settings . add_registry ( \"private-repo\" , \"https://example.jfrog.io/artifactory/git/default-cargo-local.git\" , publish_token = \"Bearer $ {PASSWORD} \" , ) project . do ( \"cargoBuild\" , CargoBuldTask ) project . do ( \"cargoPublish\" , CargoPublishTask , registry = \"private-repo\" ) Note The registry URL configured in the Kraken build script is currently written only temporarily into the .cargo/config.toml configuration file. In a future version, we may permanently write it into the file to keep it synchronized or instead pick up the configured registries by reading the configuration file instead. Integration tests The cargo_publish() and cargo_build() tasks are continuously integration tested against JFrog Artifactory and Cloudsmith. API Documentation Class CargoProjectSettings @dataclasses . dataclass class CargoProjectSettings () [view_source] Settings for Cargo tasks in a project. auth A dictionary that maps host names to (username, password) tuples. registries A dictionary that maps registry index URLs. cargo_settings def cargo_settings ( project : Project | None = None ) -> CargoProjectSettings [view_source] Creates or gets the cargo project settings for the current project or the given one. Class CargoBuildTask class CargoBuildTask ( Task ) [view_source] This task runs cargo build using the specified parameters. It will respect the authentication credentials configured in :attr: CargoProjectSettings.auth . Class CargoPublishTask class CargoPublishTask ( Task ) [view_source] Publish a Cargo crate. registry The name of the Cargo registry configured in .cargo/config.yoml under [registries] to publish the package to. allow_dirty Pass the --allow-dirty flag to cargo publish . This is usually discouraged.","title":"Cargo"},{"location":"cargo/#cargo","text":"Build Rust projects with Cargo . Features Inject HTTP(S) Basic-auth credentials into Git clone and Cargo download requests in cargo build for compatibility with private registries (workaround until rust-lang/cargo#10592 is working and merged). Quickstart # .kraken.py from kraken.api import project from kraken.std.cargo import CargoBuildTask , CargoPublishTask , cargo_settings settings = cargo_settings () settings . add_auth ( \"example.jfrog.io\" , \"me@example.org\" , \"<API_TOKEN>\" ) settings . add_registry ( \"private-repo\" , \"https://example.jfrog.io/artifactory/git/default-cargo-local.git\" , publish_token = \"Bearer $ {PASSWORD} \" , ) project . do ( \"cargoBuild\" , CargoBuldTask ) project . do ( \"cargoPublish\" , CargoPublishTask , registry = \"private-repo\" ) Note The registry URL configured in the Kraken build script is currently written only temporarily into the .cargo/config.toml configuration file. In a future version, we may permanently write it into the file to keep it synchronized or instead pick up the configured registries by reading the configuration file instead. Integration tests The cargo_publish() and cargo_build() tasks are continuously integration tested against JFrog Artifactory and Cloudsmith.","title":"Cargo"},{"location":"cargo/#api-documentation","text":"","title":"API Documentation"},{"location":"cargo/#class-cargoprojectsettings","text":"@dataclasses . dataclass class CargoProjectSettings () [view_source] Settings for Cargo tasks in a project.","title":"Class CargoProjectSettings"},{"location":"cargo/#auth","text":"A dictionary that maps host names to (username, password) tuples.","title":"auth"},{"location":"cargo/#registries","text":"A dictionary that maps registry index URLs.","title":"registries"},{"location":"cargo/#cargo_settings","text":"def cargo_settings ( project : Project | None = None ) -> CargoProjectSettings [view_source] Creates or gets the cargo project settings for the current project or the given one.","title":"cargo\u000295\u0003settings"},{"location":"cargo/#class-cargobuildtask","text":"class CargoBuildTask ( Task ) [view_source] This task runs cargo build using the specified parameters. It will respect the authentication credentials configured in :attr: CargoProjectSettings.auth .","title":"Class CargoBuildTask"},{"location":"cargo/#class-cargopublishtask","text":"class CargoPublishTask ( Task ) [view_source] Publish a Cargo crate.","title":"Class CargoPublishTask"},{"location":"cargo/#registry","text":"The name of the Cargo registry configured in .cargo/config.yoml under [registries] to publish the package to.","title":"registry"},{"location":"cargo/#allow_dirty","text":"Pass the --allow-dirty flag to cargo publish . This is usually discouraged.","title":"allow\u000295\u0003dirty"},{"location":"changelog/","text":"Changelog 0.1.10 (2022-07-19) Type Description PR Issues Author Breaking change upgrade to be compatible with `kraken-core ^0.3.0`, add Novella docs and publish to Github actions @NiklasRosenstein 0.1.9 (2022-07-14) Type Description PR Issues Author Improvement add `native_use_buildkit` option to the `NativeBuildTask` for Docker @NiklasRosenstein 0.1.8 (2022-07-14) Type Description PR Issues Author Feature add \"native\" docker build backend @NiklasRosenstein Feature add `manifest_tool_push` task @NiklasRosenstein 0.1.7 (2022-07-13) Type Description PR Issues Author Fix actually handke `KanikoBuildTask.kaniko_copy_cache_layers` option @NiklasRosenstein 0.1.6 (2022-07-09) Type Description PR Issues Author Feature Build Cargo integration test for Artifactory and Cloudsmith @NiklasRosenstein 0.1.5 (2022-07-08) Type Description PR Issues Author Feature Add `DockerBuildTask.platform` property @NiklasRosenstein Improvement use new `Task.logger` in kraken-core 0.2.4 in `KanikoBuildTask` @NiklasRosenstein Feature add `kraken.std.cargo` package with a `cargo_build()` task that can setup an MITM to inject credentials for requests to a host configured with `cargo_settings()` @NiklasRosenstein 0.1.4 (2022-07-06) Type Description PR Issues Author Breaking change update Helm task parameters and add docstrings @NiklasRosenstein 0.1.1 (2022-07-04) Type Description PR Issues Author Improvement update `docker_build()` to accept `dockerfile` parameter as a string and use `Project.to_path()` @NiklasRosenstein","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#0110-2022-07-19","text":"Type Description PR Issues Author Breaking change upgrade to be compatible with `kraken-core ^0.3.0`, add Novella docs and publish to Github actions @NiklasRosenstein","title":"0.1.10 (2022-07-19)"},{"location":"changelog/#019-2022-07-14","text":"Type Description PR Issues Author Improvement add `native_use_buildkit` option to the `NativeBuildTask` for Docker @NiklasRosenstein","title":"0.1.9 (2022-07-14)"},{"location":"changelog/#018-2022-07-14","text":"Type Description PR Issues Author Feature add \"native\" docker build backend @NiklasRosenstein Feature add `manifest_tool_push` task @NiklasRosenstein","title":"0.1.8 (2022-07-14)"},{"location":"changelog/#017-2022-07-13","text":"Type Description PR Issues Author Fix actually handke `KanikoBuildTask.kaniko_copy_cache_layers` option @NiklasRosenstein","title":"0.1.7 (2022-07-13)"},{"location":"changelog/#016-2022-07-09","text":"Type Description PR Issues Author Feature Build Cargo integration test for Artifactory and Cloudsmith @NiklasRosenstein","title":"0.1.6 (2022-07-09)"},{"location":"changelog/#015-2022-07-08","text":"Type Description PR Issues Author Feature Add `DockerBuildTask.platform` property @NiklasRosenstein Improvement use new `Task.logger` in kraken-core 0.2.4 in `KanikoBuildTask` @NiklasRosenstein Feature add `kraken.std.cargo` package with a `cargo_build()` task that can setup an MITM to inject credentials for requests to a host configured with `cargo_settings()` @NiklasRosenstein","title":"0.1.5 (2022-07-08)"},{"location":"changelog/#014-2022-07-06","text":"Type Description PR Issues Author Breaking change update Helm task parameters and add docstrings @NiklasRosenstein","title":"0.1.4 (2022-07-06)"},{"location":"changelog/#011-2022-07-04","text":"Type Description PR Issues Author Improvement update `docker_build()` to accept `dockerfile` parameter as a string and use `Project.to_path()` @NiklasRosenstein","title":"0.1.1 (2022-07-04)"},{"location":"docker/","text":"Docker Build and publish Docker images. Supported backends Native Docker (currently does not perform auth for you) Buildx (currently does not perform auth for you) Kaniko Quickstart # .kraken.py from kraken.std.docker import build_docker_image build_docker_image ( name = \"buildDocker\" , dockerfile = \"docker/release.Dockerfile\" , tags = [ \"kraken-example\" ], load = True , ) Integration tests The build_docker_image() function for Buildx and Kaniko are continuously integration tested to ensure that build time secrets under /run/secrets don't appear in the final image. API Documentation build_docker_image def build_docker_image ( * , name : str = \"buildDocker\" , backend : str = DEFAULT_BUILD_BACKEND , project : Project | None = None , ** kwds : Any ) -> DockerBuildTask [view_source] Create a new task in the current project that builds a Docker image and eventually pushes it. Class DockerBuildTask class DockerBuildTask ( Task ) [view_source] Base class for tasks that build Docker images. Subclasses implement converting the task properties into the invokation for a Docker build backend. Native Class NativeBuildTask class NativeBuildTask ( DockerBuildTask ) [view_source] Implements building a Docker image using the native docker build command. native_use_buildkit Whether to use Docker Buildkit. Enabled by default. Buildx Class BuildxBuildTask class BuildxBuildTask ( DockerBuildTask ) [view_source] Implements building a Docker image with Buildx. Kaniko Class KanikoBuildTask class KanikoBuildTask ( DockerBuildTask ) [view_source] An implementation for building Docker images with Kaniko. Manifest Tool Class ManifestToolPushTask class ManifestToolPushTask ( Task ) [view_source] A task that uses manifest-tool to combine multiple container images from different platforms into a single multi-platform manifest. For more information on manifest-tool , check out the GitHub repository: https://github.com/estesp/manifest-tool/ platforms The Docker platforms to create the manifest for. template A Docker image tag that should contain the variables OS , ARCH and VARIANT . target The image ID to push the Docker image to. manifest_tool_local Prefer the local version of the tool if available. Default is true . manifest_tool_version The tool version to use. The appropriate release will be downloaded from Github. fetch_manifest_tool def fetch_manifest_tool () -> Path [view_source] Fetches the manifest tool binary that is appropriate for the current platform.","title":"Docker"},{"location":"docker/#docker","text":"Build and publish Docker images. Supported backends Native Docker (currently does not perform auth for you) Buildx (currently does not perform auth for you) Kaniko Quickstart # .kraken.py from kraken.std.docker import build_docker_image build_docker_image ( name = \"buildDocker\" , dockerfile = \"docker/release.Dockerfile\" , tags = [ \"kraken-example\" ], load = True , ) Integration tests The build_docker_image() function for Buildx and Kaniko are continuously integration tested to ensure that build time secrets under /run/secrets don't appear in the final image.","title":"Docker"},{"location":"docker/#api-documentation","text":"","title":"API Documentation"},{"location":"docker/#build_docker_image","text":"def build_docker_image ( * , name : str = \"buildDocker\" , backend : str = DEFAULT_BUILD_BACKEND , project : Project | None = None , ** kwds : Any ) -> DockerBuildTask [view_source] Create a new task in the current project that builds a Docker image and eventually pushes it.","title":"build\u000295\u0003docker\u000295\u0003image"},{"location":"docker/#class-dockerbuildtask","text":"class DockerBuildTask ( Task ) [view_source] Base class for tasks that build Docker images. Subclasses implement converting the task properties into the invokation for a Docker build backend.","title":"Class DockerBuildTask"},{"location":"docker/#native","text":"","title":"Native"},{"location":"docker/#class-nativebuildtask","text":"class NativeBuildTask ( DockerBuildTask ) [view_source] Implements building a Docker image using the native docker build command.","title":"Class NativeBuildTask"},{"location":"docker/#native_use_buildkit","text":"Whether to use Docker Buildkit. Enabled by default.","title":"native\u000295\u0003use\u000295\u0003buildkit"},{"location":"docker/#buildx","text":"","title":"Buildx"},{"location":"docker/#class-buildxbuildtask","text":"class BuildxBuildTask ( DockerBuildTask ) [view_source] Implements building a Docker image with Buildx.","title":"Class BuildxBuildTask"},{"location":"docker/#kaniko","text":"","title":"Kaniko"},{"location":"docker/#class-kanikobuildtask","text":"class KanikoBuildTask ( DockerBuildTask ) [view_source] An implementation for building Docker images with Kaniko.","title":"Class KanikoBuildTask"},{"location":"docker/#manifest-tool","text":"","title":"Manifest Tool"},{"location":"docker/#class-manifesttoolpushtask","text":"class ManifestToolPushTask ( Task ) [view_source] A task that uses manifest-tool to combine multiple container images from different platforms into a single multi-platform manifest. For more information on manifest-tool , check out the GitHub repository: https://github.com/estesp/manifest-tool/","title":"Class ManifestToolPushTask"},{"location":"docker/#platforms","text":"The Docker platforms to create the manifest for.","title":"platforms"},{"location":"docker/#template","text":"A Docker image tag that should contain the variables OS , ARCH and VARIANT .","title":"template"},{"location":"docker/#target","text":"The image ID to push the Docker image to.","title":"target"},{"location":"docker/#manifest_tool_local","text":"Prefer the local version of the tool if available. Default is true .","title":"manifest\u000295\u0003tool\u000295\u0003local"},{"location":"docker/#manifest_tool_version","text":"The tool version to use. The appropriate release will be downloaded from Github.","title":"manifest\u000295\u0003tool\u000295\u0003version"},{"location":"docker/#fetch_manifest_tool","text":"def fetch_manifest_tool () -> Path [view_source] Fetches the manifest tool binary that is appropriate for the current platform.","title":"fetch\u000295\u0003manifest\u000295\u0003tool"},{"location":"helm/","text":"Helm Package and publish Helm charts to OCI or HTTP(S) registries. Quickstart # .kraken.py from kraken.api import project from kraken.std.helm import HelmPushTask , HelmPackageTask , helm_settings helm_settings () . add_auth ( \"example.jfrog.io\" , \"me@example.org\" , \"api_token\" ) package = project . do ( \"helmPackage\" , HelmPackageTask , chart_path = \"./my-helm-chart\" ) project . do ( \"helmPush\" , HelmPushTask , chart_tarball = package . chart_tarball , registry = \"example.jfrog.io/helm-local\" ) API Documentation Class HelmSettings @dataclasses . dataclass class HelmSettings () [view_source] Project-specific settings for Helm. helm_settings def helm_settings ( project : Project | None = None ) -> HelmSettings [view_source] Create or get Helm settings for the project. Class HelmPackageTask class HelmPackageTask ( Task ) [view_source] Packages a Helm chart. Class HelmPushTask class HelmPushTask ( Task ) [view_source] Pushes a Helm chart to a Helm registry. Supports OCI and HTTP(S) registries. chart_tarball The path to the Helm chart package file. This is usually linked with the :attr: HelmPackageTask.chart_tarball output property. registry The Helm registry to push to. This can be an HTTP(S) URL to a Helm registry, in which case it must be the full URL to the remote \"directory\" where the :attr: chart_tarball will be uploaded to. The filename for the chart in the directory is the basename of :attr: chart_tarball unless :attr: chart_name is set. Alternatively, an oci:// URL can be specified in which case the helm push command is used to push the chart instead. Note that in this case the :attr: chart_name cannot be used and doing so will result in an error. chart_name The base name of the chart in the registry. Only when uploading to a HTTP(S) \"directory\". chart_url The final constructed chart URL that the chart will be published under. Note: This URL is not currently constructed when pushing to an oci:// registry and reading the property will cause an error.","title":"Helm"},{"location":"helm/#helm","text":"Package and publish Helm charts to OCI or HTTP(S) registries. Quickstart # .kraken.py from kraken.api import project from kraken.std.helm import HelmPushTask , HelmPackageTask , helm_settings helm_settings () . add_auth ( \"example.jfrog.io\" , \"me@example.org\" , \"api_token\" ) package = project . do ( \"helmPackage\" , HelmPackageTask , chart_path = \"./my-helm-chart\" ) project . do ( \"helmPush\" , HelmPushTask , chart_tarball = package . chart_tarball , registry = \"example.jfrog.io/helm-local\" )","title":"Helm"},{"location":"helm/#api-documentation","text":"","title":"API Documentation"},{"location":"helm/#class-helmsettings","text":"@dataclasses . dataclass class HelmSettings () [view_source] Project-specific settings for Helm.","title":"Class HelmSettings"},{"location":"helm/#helm_settings","text":"def helm_settings ( project : Project | None = None ) -> HelmSettings [view_source] Create or get Helm settings for the project.","title":"helm\u000295\u0003settings"},{"location":"helm/#class-helmpackagetask","text":"class HelmPackageTask ( Task ) [view_source] Packages a Helm chart.","title":"Class HelmPackageTask"},{"location":"helm/#class-helmpushtask","text":"class HelmPushTask ( Task ) [view_source] Pushes a Helm chart to a Helm registry. Supports OCI and HTTP(S) registries.","title":"Class HelmPushTask"},{"location":"helm/#chart_tarball","text":"The path to the Helm chart package file. This is usually linked with the :attr: HelmPackageTask.chart_tarball output property.","title":"chart\u000295\u0003tarball"},{"location":"helm/#registry","text":"The Helm registry to push to. This can be an HTTP(S) URL to a Helm registry, in which case it must be the full URL to the remote \"directory\" where the :attr: chart_tarball will be uploaded to. The filename for the chart in the directory is the basename of :attr: chart_tarball unless :attr: chart_name is set. Alternatively, an oci:// URL can be specified in which case the helm push command is used to push the chart instead. Note that in this case the :attr: chart_name cannot be used and doing so will result in an error.","title":"registry"},{"location":"helm/#chart_name","text":"The base name of the chart in the registry. Only when uploading to a HTTP(S) \"directory\".","title":"chart\u000295\u0003name"},{"location":"helm/#chart_url","text":"The final constructed chart URL that the chart will be published under. Note: This URL is not currently constructed when pushing to an oci:// registry and reading the property will cause an error.","title":"chart\u000295\u0003url"}]}